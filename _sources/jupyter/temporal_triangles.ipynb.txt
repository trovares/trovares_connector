{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0a84f0a2",
   "metadata": {},
   "source": [
    "# Temporal Triangles\n",
    "This notebook walks through running the temporal triangles benchmark on xGT and comparing the performance to xGT.\n",
    "It uses the following data set that would need to be loaded into Neo4j: https://datasets.trovares.com/TT/tt.1M."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e10ab2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from trovares_connector import Neo4jConnector, Neo4jDriver\n",
    "import xgt\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52f1e71d",
   "metadata": {},
   "source": [
    "## Connect to xGT and Neo4j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "066e36c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "xgt_server = xgt.Connection()\n",
    "xgt_server.set_default_namespace('neo4j')\n",
    "database = \"temporal-triangles-1M\"\n",
    "neo4j_server = Neo4jDriver(auth=('neo4j', 'foo'), database=database)\n",
    "c = Neo4jConnector(xgt_server, neo4j_server)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b4e7f02",
   "metadata": {},
   "source": [
    "## Query to run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7154ed8",
   "metadata": {},
   "outputs": [],
   "source": [
    "threshold=15\n",
    "query = \"\"\"\n",
    "    MATCH (v1)-[e1:Edges]->(v2)\n",
    "              -[e2:Edges]->(v3)\n",
    "              -[e3:Edges]->(v1)\n",
    "    WHERE v1 <> v2 AND v1 <> v3 AND v2 <> v3\n",
    "      AND e1.timestamp <= e2.timestamp\n",
    "      AND e2.timestamp <= e3.timestamp\n",
    "      AND e3.timestamp - e1.timestamp < {:d}\n",
    "    RETURN v1.id as v1id,\n",
    "           e1.timestamp as e1_timestamp,\n",
    "           v2.id as v2id,\n",
    "           e2.timestamp as e2_timestamp,\n",
    "           v3.id as v3id,\n",
    "           e3.timestamp as e3_timestamp,\n",
    "           e3.timestamp - e1.timestamp as delta\n",
    "  \"\"\".format(threshold)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b52fb50",
   "metadata": {},
   "source": [
    "## Transfer data to xGT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f49f1f12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transferring: [############################################################] 1090677/1090677 in 0:00:34.7s (31433.6/s, eta: 0:00:00.0s)\n",
      "Transfer to xgt time: 34.86\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "c.transfer_to_xgt()\n",
    "t_duration = time.time() - t0\n",
    "print(f\"Transfer to xgt time: {t_duration:,.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2b24e88",
   "metadata": {},
   "source": [
    "## Run query on xGT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8db838d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[26563, 7598, 51565, 7598, 15727, 7612, 14]]\n",
      "Query to xgt time: 0.49\n",
      "Total xgt time including transfer: 35.35\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "job = xgt_server.run_job(query)\n",
    "q_duration = time.time() - t0\n",
    "print(job.get_data())\n",
    "print(f\"Query to xgt time: {q_duration:,.2f}\")\n",
    "print(f\"Total xgt time including transfer: {t_duration + q_duration:,.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c4c6fe5",
   "metadata": {},
   "source": [
    "## Run query on Neo4j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9dd152c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<Record v1id=26563 e1_timestamp=7598 v2id=51565 e2_timestamp=7598 v3id=15727 e3_timestamp=7612 delta=14>\n",
      "Neo4j query time: 45.05\n"
     ]
    }
   ],
   "source": [
    "t0 = time.time()\n",
    "with neo4j_server.query(query) as job:\n",
    "    for row in job.result():\n",
    "        print(row)\n",
    "    n_duration = time.time() - t0\n",
    "    print(f\"Neo4j query time: {n_duration:,.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3c2de345",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Query speedup: 92.72X\n",
      "Speedup including transfer: 1.27X\n"
     ]
    }
   ],
   "source": [
    "print(f\"Query speedup: {n_duration/q_duration:,.2f}X\")\n",
    "print(f\"Speedup including transfer: {n_duration/(t_duration + q_duration):,.2f}X\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
